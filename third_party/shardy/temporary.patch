diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index fb96878..65049c0 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,49 +1,97 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/mlir/include/mlir/IR/CommonTypeConstraints.td b/mlir/include/mlir/IR/CommonTypeConstraints.td
---- a/mlir/include/mlir/IR/CommonTypeConstraints.td
-+++ b/mlir/include/mlir/IR/CommonTypeConstraints.td
-@@ -329,31 +329,31 @@
- def F80 : F<80>;
- def F128 : F<128>;
+diff -ruN --strip-trailing-cr a/libcxx/include/__vector/vector_bool.h b/libcxx/include/__vector/vector_bool.h
+--- a/libcxx/include/__vector/vector_bool.h
++++ b/libcxx/include/__vector/vector_bool.h
+@@ -859,11 +859,13 @@
  
--def BF16 : Type<CPred<"::llvm::isa<BFloat16Type>($_self)">, "bfloat16 type">,
-+def BF16 : Type<CPred<"::llvm::isa<::mlir::BFloat16Type>($_self)">, "bfloat16 type">,
-            BuildableType<"$_builder.getType<BFloat16Type>()">;
--def TF32 : Type<CPred<"::llvm::isa<FloatTF32Type>($_self)">, "tf32 type">,
-+def TF32 : Type<CPred<"::llvm::isa<::mlir::FloatTF32Type>($_self)">, "tf32 type">,
-            BuildableType<"$_builder.getType<FloatTF32Type>()">;
--def F8E4M3FN : Type<CPred<"::llvm::isa<Float8E4M3FNType>($_self)">, "f8E4M3FN type">,
-+def F8E4M3FN : Type<CPred<"::llvm::isa<::mlir::Float8E4M3FNType>($_self)">, "f8E4M3FN type">,
-                BuildableType<"$_builder.getType<Float8E4M3FNType>()">;
--def F8E5M2 : Type<CPred<"::llvm::isa<Float8E5M2Type>($_self)">, "f8E5M2 type">,
-+def F8E5M2 : Type<CPred<"::llvm::isa<::mlir::Float8E5M2Type>($_self)">, "f8E5M2 type">,
-              BuildableType<"$_builder.getType<Float8E5M2Type>()">;
--def F8E4M3 : Type<CPred<"::llvm::isa<Float8E4M3Type>($_self)">, "f8E4M3 type">,
-+def F8E4M3 : Type<CPred<"::llvm::isa<::mlir::Float8E4M3Type>($_self)">, "f8E4M3 type">,
-              BuildableType<"$_builder.getType<Float8E4M3Type>()">;
--def F8E4M3FNUZ : Type<CPred<"::llvm::isa<Float8E4M3FNUZType>($_self)">, "f8E4M3FNUZ type">,
-+def F8E4M3FNUZ : Type<CPred<"::llvm::isa<::mlir::Float8E4M3FNUZType>($_self)">, "f8E4M3FNUZ type">,
-                  BuildableType<"$_builder.getType<Float8E4M3FNUZType>()">;
--def F8E4M3B11FNUZ : Type<CPred<"::llvm::isa<Float8E4M3B11FNUZType>($_self)">, "f8E4M3B11FNUZ type">,
-+def F8E4M3B11FNUZ : Type<CPred<"::llvm::isa<::mlir::Float8E4M3B11FNUZType>($_self)">, "f8E4M3B11FNUZ type">,
-                  BuildableType<"$_builder.getType<Float8E4M3B11FNUZType>()">;
--def F8E5M2FNUZ : Type<CPred<"::llvm::isa<Float8E5M2FNUZType>($_self)">, "f8E5M2FNUZ type">,
-+def F8E5M2FNUZ : Type<CPred<"::llvm::isa<::mlir::Float8E5M2FNUZType>($_self)">, "f8E5M2FNUZ type">,
-                  BuildableType<"$_builder.getType<Float8E5M2FNUZType>()">;
--def F8E3M4 : Type<CPred<"::llvm::isa<Float8E3M4Type>($_self)">, "f8E3M4 type">,
-+def F8E3M4 : Type<CPred<"::llvm::isa<::mlir::Float8E3M4Type>($_self)">, "f8E3M4 type">,
-              BuildableType<"$_builder.getType<Float8E3M4Type>()">;
--def F4E2M1FN : Type<CPred<"::llvm::isa<Float4E2M1FNType>($_self)">, "f4E2M1FN type">,
-+def F4E2M1FN : Type<CPred<"::llvm::isa<::mlir::Float4E2M1FNType>($_self)">, "f4E2M1FN type">,
-                BuildableType<"$_builder.getType<Float4E2M1FNType>()">;
--def F6E2M3FN : Type<CPred<"::llvm::isa<Float6E2M3FNType>($_self)">, "f6E2M3FN type">,
-+def F6E2M3FN : Type<CPred<"::llvm::isa<::mlir::Float6E2M3FNType>($_self)">, "f6E2M3FN type">,
-                BuildableType<"$_builder.getType<Float6E2M3FNType>()">;
--def F6E3M2FN : Type<CPred<"::llvm::isa<Float6E3M2FNType($_self)">, "f6E3M2FN type">,
-+def F6E3M2FN : Type<CPred<"::llvm::isa<::mlir::Float6E3M2FNType>($_self)">, "f6E3M2FN type">,
-                BuildableType<"$_builder.getType<Float6E3M2FNType>()">;
--def F8E8M0FNU : Type<CPred<"::llvm::isa<Float8E8M0FNUType>($_self)">, "f8E8M0FNU type">,
-+def F8E8M0FNU : Type<CPred<"::llvm::isa<::mlir::Float8E8M0FNUType>($_self)">, "f8E8M0FNU type">,
-                 BuildableType<"$_builder.getType<Float8E8M0FNUType>()">;
+ template <class _Allocator>
+ _LIBCPP_CONSTEXPR_SINCE_CXX20 void vector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT {
+-  if (__external_cap_to_internal(size()) > __cap_) {
++  if (__external_cap_to_internal(size()) < __cap_) {
+ #if _LIBCPP_HAS_EXCEPTIONS
+     try {
+ #endif // _LIBCPP_HAS_EXCEPTIONS
+-      vector(*this, allocator_type(__alloc_)).swap(*this);
++      vector __v(*this, allocator_type(__alloc_));
++      if (__v.__cap_ < __cap_)
++        __v.swap(*this);
+ #if _LIBCPP_HAS_EXCEPTIONS
+     } catch (...) {
+     }
+diff -ruN --strip-trailing-cr a/libcxx/test/std/containers/sequences/vector.bool/shrink_to_fit.pass.cpp b/libcxx/test/std/containers/sequences/vector.bool/shrink_to_fit.pass.cpp
+--- a/libcxx/test/std/containers/sequences/vector.bool/shrink_to_fit.pass.cpp
++++ b/libcxx/test/std/containers/sequences/vector.bool/shrink_to_fit.pass.cpp
+@@ -11,7 +11,10 @@
+ 
+ // void shrink_to_fit();
+ 
++// XFAIL: FROZEN-CXX03-HEADERS-FIXME
++
+ #include <cassert>
++#include <climits>
+ #include <vector>
+ 
+ #include "increasing_allocator.h"
+@@ -20,19 +23,56 @@
+ 
+ TEST_CONSTEXPR_CXX20 bool tests() {
+   {
+-    std::vector<bool> v(100);
++    using C = std::vector<bool>;
++    C v(100);
+     v.push_back(1);
++    C::size_type before_cap = v.capacity();
++    v.clear();
+     v.shrink_to_fit();
+-    assert(v.capacity() >= 101);
+-    assert(v.size() >= 101);
++    assert(v.capacity() <= before_cap);
++    LIBCPP_ASSERT(v.capacity() == 0); // libc++ honors the shrink_to_fit request as a QOI matter
++    assert(v.size() == 0);
+   }
+-#if TEST_STD_VER >= 11
+   {
+-    std::vector<bool, min_allocator<bool>> v(100);
++    using C = std::vector<bool, min_allocator<bool> >;
++    C v(100);
+     v.push_back(1);
++    C::size_type before_cap = v.capacity();
+     v.shrink_to_fit();
+     assert(v.capacity() >= 101);
+-    assert(v.size() >= 101);
++    assert(v.capacity() <= before_cap);
++    assert(v.size() == 101);
++    v.erase(v.begin() + 1, v.end());
++    v.shrink_to_fit();
++    assert(v.capacity() <= before_cap);
++    LIBCPP_ASSERT(v.capacity() == C(1).capacity()); // libc++ honors the shrink_to_fit request as a QOI matter.
++    assert(v.size() == 1);
++  }
++
++#if defined(_LIBCPP_VERSION)
++  {
++    using C                = std::vector<bool>;
++    unsigned bits_per_word = static_cast<unsigned>(sizeof(C::__storage_type) * CHAR_BIT);
++    C v(bits_per_word);
++    v.push_back(1);
++    assert(v.capacity() == bits_per_word * 2);
++    assert(v.size() == bits_per_word + 1);
++    v.pop_back();
++    v.shrink_to_fit();
++    assert(v.capacity() == bits_per_word);
++    assert(v.size() == bits_per_word);
++  }
++  {
++    using C                = std::vector<bool>;
++    unsigned bits_per_word = static_cast<unsigned>(sizeof(C::__storage_type) * CHAR_BIT);
++    C v;
++    v.reserve(bits_per_word * 2);
++    v.push_back(1);
++    assert(v.capacity() == bits_per_word * 2);
++    assert(v.size() == 1);
++    v.shrink_to_fit();
++    assert(v.capacity() == bits_per_word);
++    assert(v.size() == 1);
+   }
+ #endif
  
- def AnyComplex : Type<CPred<"::llvm::isa<::mlir::ComplexType>($_self)">,
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 57a036a..c4ab4ee 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "7084110518f904192c2935327b884b17de00bee0"
-    LLVM_SHA256 = "de3c8f279e29e48d8dd1b51131e2f05a86a70fb7e95fd4d2eba18668b9c4e93d"
+    LLVM_COMMIT = "b7abc510c515c4df521c84c6f664a138f8cf01e0"
+    LLVM_SHA256 = "9626e225cde7e896ea8231b4494772e902b00d009c78b76a9493474cbe3a3123"
 
     tf_http_archive(
         name = name,
