diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 776d4e6..509398d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,56 +1 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/GlobalMerge.cpp b/llvm/lib/CodeGen/GlobalMerge.cpp
---- a/llvm/lib/CodeGen/GlobalMerge.cpp
-+++ b/llvm/lib/CodeGen/GlobalMerge.cpp
-@@ -423,12 +423,24 @@
-     }
-   }
- 
-+  // Now we found a bunch of sets of globals used together.  We accumulated
-+  // the number of times we encountered the sets (i.e., the number of functions
-+  // that use that exact set of globals).
-+  //
-+  // Multiply that by the size of the set to give us a crude profitability
-+  // metric.
-+  llvm::stable_sort(UsedGlobalSets,
-+                    [](const UsedGlobalSet &UGS1, const UsedGlobalSet &UGS2) {
-+                      return UGS1.Globals.count() * UGS1.UsageCount <
-+                             UGS2.Globals.count() * UGS2.UsageCount;
-+                    });
-+
-   // We can choose to merge all globals together, but ignore globals never used
-   // with another global.  This catches the obviously non-profitable cases of
-   // having a single global, but is aggressive enough for any other case.
-   if (GlobalMergeIgnoreSingleUse) {
-     BitVector AllGlobals(Globals.size());
--    for (const UsedGlobalSet &UGS : UsedGlobalSets) {
-+    for (const UsedGlobalSet &UGS : llvm::reverse(UsedGlobalSets)) {
-       if (UGS.UsageCount == 0)
-         continue;
-       if (UGS.Globals.count() > 1)
-@@ -437,16 +449,6 @@
-     return doMerge(Globals, AllGlobals, M, isConst, AddrSpace);
-   }
- 
--  // Now we found a bunch of sets of globals used together. We accumulated
--  // the number of times we encountered the sets (i.e., the number of functions
--  // that use that exact set of globals). Multiply that by the size of the set
--  // to give us a crude profitability metric.
--  llvm::stable_sort(UsedGlobalSets,
--                    [](const UsedGlobalSet &UGS1, const UsedGlobalSet &UGS2) {
--                      return UGS1.Globals.count() * UGS1.UsageCount >=
--                             UGS2.Globals.count() * UGS2.UsageCount;
--                    });
--
-   // Starting from the sets with the best (=biggest) profitability, find a
-   // good combination.
-   // The ideal (and expensive) solution can only be found by trying all
-@@ -456,7 +458,7 @@
-   BitVector PickedGlobals(Globals.size());
-   bool Changed = false;
- 
--  for (const UsedGlobalSet &UGS : UsedGlobalSets) {
-+  for (const UsedGlobalSet &UGS : llvm::reverse(UsedGlobalSets)) {
-     if (UGS.UsageCount == 0)
-       continue;
-     if (PickedGlobals.anyCommon(UGS.Globals))
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 6b3934d..9a6e8a5 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "77c780d64b950d6850d5ec1ee06cd0c21b38b89e"
-    LLVM_SHA256 = "109bdf7b5e62992fa8ccf9445eb462b046ffc6409de859f5f7482ea3cde8f967"
+    LLVM_COMMIT = "3684ec425904424fc4dc80c8661f82bc676d7197"
+    LLVM_SHA256 = "655e096fbcf07b2f71c5a5758aed7b46fcd64b5e2bd6054cc1691efe93652f54"
 
     tf_http_archive(
         name = name,
