diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 2331b44..3d2a252 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,22 +1,207 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/mlir/lib/Dialect/Vector/Transforms/VectorEmulateNarrowType.cpp b/mlir/lib/Dialect/Vector/Transforms/VectorEmulateNarrowType.cpp
---- a/mlir/lib/Dialect/Vector/Transforms/VectorEmulateNarrowType.cpp
-+++ b/mlir/lib/Dialect/Vector/Transforms/VectorEmulateNarrowType.cpp
-@@ -1291,7 +1291,7 @@
- /// bitwise ops to avoid leaving LLVM to scramble with peephole optimizations.
- static Value rewriteI4ToI8Ext(PatternRewriter &rewriter, Location loc,
-                               Value srcValue, const ExtractNBitsFn &extFn) {
--  auto srcVecType = cast<VectorType>(srcValue.getType());
-+  [[maybe_unused]] auto srcVecType = cast<VectorType>(srcValue.getType());
-   assert(srcVecType.getElementType().isSignlessInteger(4) &&
-          "Expected i4 type");
+diff -ruN --strip-trailing-cr a/mlir/include/mlir/IR/TypeRange.h b/mlir/include/mlir/IR/TypeRange.h
+--- a/mlir/include/mlir/IR/TypeRange.h
++++ b/mlir/include/mlir/IR/TypeRange.h
+@@ -29,12 +29,11 @@
+ /// a SmallVector/std::vector. This class should be used in places that are not
+ /// suitable for a more derived type (e.g. ArrayRef) or a template range
+ /// parameter.
+-class TypeRange
+-    : public llvm::detail::indexed_accessor_range_base<
+-          TypeRange,
+-          llvm::PointerUnion<const Value *, const Type *, OpOperand *,
+-                             detail::OpResultImpl *, Type>,
+-          Type, Type, Type> {
++class TypeRange : public llvm::detail::indexed_accessor_range_base<
++                      TypeRange,
++                      llvm::PointerUnion<const Value *, const Type *,
++                                         OpOperand *, detail::OpResultImpl *>,
++                      Type, Type, Type> {
+ public:
+   using RangeBaseT::RangeBaseT;
+   TypeRange(ArrayRef<Type> types = std::nullopt);
+@@ -45,11 +44,8 @@
+   TypeRange(ValueTypeRange<ValueRangeT> values)
+       : TypeRange(ValueRange(ValueRangeT(values.begin().getCurrent(),
+                                          values.end().getCurrent()))) {}
+-
+-  TypeRange(Type type) : TypeRange(type, /*count=*/1) {}
+-  template <typename Arg, typename = std::enable_if_t<
+-                              std::is_constructible_v<ArrayRef<Type>, Arg> &&
+-                              !std::is_constructible_v<Type, Arg>>>
++  template <typename Arg, typename = std::enable_if_t<std::is_constructible<
++                              ArrayRef<Type>, Arg>::value>>
+   TypeRange(Arg &&arg) : TypeRange(ArrayRef<Type>(std::forward<Arg>(arg))) {}
+   TypeRange(std::initializer_list<Type> types)
+       : TypeRange(ArrayRef<Type>(types)) {}
+@@ -60,9 +56,8 @@
+   /// * A pointer to the first element of an array of types.
+   /// * A pointer to the first element of an array of operands.
+   /// * A pointer to the first element of an array of results.
+-  /// * A single 'Type' instance.
+   using OwnerT = llvm::PointerUnion<const Value *, const Type *, OpOperand *,
+-                                    detail::OpResultImpl *, Type>;
++                                    detail::OpResultImpl *>;
  
-@@ -1311,7 +1311,7 @@
- /// bitwise ops to avoid leaving LLVM to scramble with peephole optimizations.
- static Value rewriteI2ToI8Ext(PatternRewriter &rewriter, Location loc,
-                               Value srcValue, const ExtractNBitsFn &extFn) {
--  VectorType srcVecType = cast<VectorType>(srcValue.getType());
-+  [[maybe_unused]] VectorType srcVecType = cast<VectorType>(srcValue.getType());
-   assert(srcVecType.getElementType().isSignlessInteger(2) &&
-          "Expected i2 type");
+   /// See `llvm::detail::indexed_accessor_range_base` for details.
+   static OwnerT offset_base(OwnerT object, ptrdiff_t index);
+diff -ruN --strip-trailing-cr a/mlir/include/mlir/IR/ValueRange.h b/mlir/include/mlir/IR/ValueRange.h
+--- a/mlir/include/mlir/IR/ValueRange.h
++++ b/mlir/include/mlir/IR/ValueRange.h
+@@ -374,16 +374,16 @@
+ /// SmallVector/std::vector. This class should be used in places that are not
+ /// suitable for a more derived type (e.g. ArrayRef) or a template range
+ /// parameter.
+-class ValueRange final : public llvm::detail::indexed_accessor_range_base<
+-                             ValueRange,
+-                             PointerUnion<const Value *, OpOperand *,
+-                                          detail::OpResultImpl *, Value>,
+-                             Value, Value, Value> {
++class ValueRange final
++    : public llvm::detail::indexed_accessor_range_base<
++          ValueRange,
++          PointerUnion<const Value *, OpOperand *, detail::OpResultImpl *>,
++          Value, Value, Value> {
+ public:
+   /// The type representing the owner of a ValueRange. This is either a list of
+-  /// values, operands, or results or a single value.
++  /// values, operands, or results.
+   using OwnerT =
+-      PointerUnion<const Value *, OpOperand *, detail::OpResultImpl *, Value>;
++      PointerUnion<const Value *, OpOperand *, detail::OpResultImpl *>;
  
+   using RangeBaseT::RangeBaseT;
+ 
+@@ -392,7 +392,7 @@
+                 std::is_constructible<ArrayRef<Value>, Arg>::value &&
+                 !std::is_convertible<Arg, Value>::value>>
+   ValueRange(Arg &&arg) : ValueRange(ArrayRef<Value>(std::forward<Arg>(arg))) {}
+-  ValueRange(Value value) : ValueRange(value, /*count=*/1) {}
++  ValueRange(const Value &value) : ValueRange(&value, /*count=*/1) {}
+   ValueRange(const std::initializer_list<Value> &values)
+       : ValueRange(ArrayRef<Value>(values)) {}
+   ValueRange(iterator_range<OperandRange::iterator> values)
+diff -ruN --strip-trailing-cr a/mlir/lib/IR/OperationSupport.cpp b/mlir/lib/IR/OperationSupport.cpp
+--- a/mlir/lib/IR/OperationSupport.cpp
++++ b/mlir/lib/IR/OperationSupport.cpp
+@@ -653,15 +653,6 @@
+ /// See `llvm::detail::indexed_accessor_range_base` for details.
+ ValueRange::OwnerT ValueRange::offset_base(const OwnerT &owner,
+                                            ptrdiff_t index) {
+-  if (llvm::isa_and_nonnull<Value>(owner)) {
+-    // Prevent out-of-bounds indexing for single values.
+-    // Note that we do allow an index of 1 as is required by 'slice'ing that
+-    // returns an empty range. This also matches the usual rules of C++ of being
+-    // allowed to index past the last element of an array.
+-    assert(index <= 1 && "out-of-bound offset into single-value 'ValueRange'");
+-    // Return nullptr to quickly cause segmentation faults on misuse.
+-    return index == 0 ? owner : nullptr;
+-  }
+   if (const auto *value = llvm::dyn_cast_if_present<const Value *>(owner))
+     return {value + index};
+   if (auto *operand = llvm::dyn_cast_if_present<OpOperand *>(owner))
+@@ -670,10 +661,6 @@
+ }
+ /// See `llvm::detail::indexed_accessor_range_base` for details.
+ Value ValueRange::dereference_iterator(const OwnerT &owner, ptrdiff_t index) {
+-  if (auto value = llvm::dyn_cast_if_present<Value>(owner)) {
+-    assert(index == 0 && "cannot offset into single-value 'ValueRange'");
+-    return value;
+-  }
+   if (const auto *value = llvm::dyn_cast_if_present<const Value *>(owner))
+     return value[index];
+   if (auto *operand = llvm::dyn_cast_if_present<OpOperand *>(owner))
+diff -ruN --strip-trailing-cr a/mlir/lib/IR/TypeRange.cpp b/mlir/lib/IR/TypeRange.cpp
+--- a/mlir/lib/IR/TypeRange.cpp
++++ b/mlir/lib/IR/TypeRange.cpp
+@@ -31,23 +31,12 @@
+     this->base = result;
+   else if (auto *operand = llvm::dyn_cast_if_present<OpOperand *>(owner))
+     this->base = operand;
+-  else if (auto value = llvm::dyn_cast_if_present<Value>(owner))
+-    this->base = value.getType();
+   else
+     this->base = cast<const Value *>(owner);
+ }
+ 
+ /// See `llvm::detail::indexed_accessor_range_base` for details.
+ TypeRange::OwnerT TypeRange::offset_base(OwnerT object, ptrdiff_t index) {
+-  if (llvm::isa_and_nonnull<Type>(object)) {
+-    // Prevent out-of-bounds indexing for single values.
+-    // Note that we do allow an index of 1 as is required by 'slice'ing that
+-    // returns an empty range. This also matches the usual rules of C++ of being
+-    // allowed to index past the last element of an array.
+-    assert(index <= 1 && "out-of-bound offset into single-value 'ValueRange'");
+-    // Return nullptr to quickly cause segmentation faults on misuse.
+-    return index == 0 ? object : nullptr;
+-  }
+   if (const auto *value = llvm::dyn_cast_if_present<const Value *>(object))
+     return {value + index};
+   if (auto *operand = llvm::dyn_cast_if_present<OpOperand *>(object))
+@@ -59,10 +48,6 @@
+ 
+ /// See `llvm::detail::indexed_accessor_range_base` for details.
+ Type TypeRange::dereference_iterator(OwnerT object, ptrdiff_t index) {
+-  if (auto type = llvm::dyn_cast_if_present<Type>(object)) {
+-    assert(index == 0 && "cannot offset into single-value 'TypeRange'");
+-    return type;
+-  }
+   if (const auto *value = llvm::dyn_cast_if_present<const Value *>(object))
+     return (value + index)->getType();
+   if (auto *operand = llvm::dyn_cast_if_present<OpOperand *>(object))
+diff -ruN --strip-trailing-cr a/mlir/unittests/IR/OperationSupportTest.cpp b/mlir/unittests/IR/OperationSupportTest.cpp
+--- a/mlir/unittests/IR/OperationSupportTest.cpp
++++ b/mlir/unittests/IR/OperationSupportTest.cpp
+@@ -313,21 +313,4 @@
+   op2->destroy();
+ }
+ 
+-TEST(ValueRangeTest, ValueConstructable) {
+-  MLIRContext context;
+-  Builder builder(&context);
+-
+-  Operation *useOp =
+-      createOp(&context, /*operands=*/std::nullopt, builder.getIntegerType(16));
+-  // Valid construction despite a temporary 'OpResult'.
+-  ValueRange operands = useOp->getResult(0);
+-
+-  useOp->setOperands(operands);
+-  EXPECT_EQ(useOp->getNumOperands(), 1u);
+-  EXPECT_EQ(useOp->getOperand(0), useOp->getResult(0));
+-
+-  useOp->dropAllUses();
+-  useOp->destroy();
+-}
+-
+ } // namespace
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/clang/BUILD.bazel b/utils/bazel/llvm-project-overlay/clang/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/clang/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/clang/BUILD.bazel
+@@ -43,10 +43,7 @@
+ 
+ gentbl(
+     name = "diagnostic_defs_gen",
+-    tbl_outs = [(
+-        "-gen-clang-diags-defs -clang-component=%s" % c,
+-        "include/clang/Basic/Diagnostic%sKinds.inc" % c,
+-    ) for c in [
++    tbl_outs = [out for c in [
+         "AST",
+         "Analysis",
+         "Comment",
+@@ -60,6 +57,15 @@
+         "Refactoring",
+         "Sema",
+         "Serialization",
++    ] for out in [
++        (
++            "-gen-clang-diags-defs -clang-component=%s" % c,
++            "include/clang/Basic/Diagnostic%sKinds.inc" % c,
++        ),
++        (
++            "-gen-clang-diags-enums -clang-component=%s" % c,
++            "include/clang/Basic/Diagnostic%sEnums.inc" % c,
++        ),
+     ]] + [
+         (
+             "-gen-clang-diag-groups",
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 4602e35..4706c63 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "c24ce324d56328e4b91c8797ea4935545084303e"
-    LLVM_SHA256 = "ef9f02427de91c37b2315203fc60fa71cac5caa385860fd2a1daa620b4867091"
+    LLVM_COMMIT = "bf17016a92bc8a23d2cdd2b51355dd4eb5019c68"
+    LLVM_SHA256 = "ba09f12e5019f5aca531b1733275f0a10b181d6f894deb1a4610e017f76b172a"
 
     tf_http_archive(
         name = name,
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index 2e151cb..0a91a1e 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -322,18 +322,6 @@ diff --ruN a/stablehlo/stablehlo/tests/interpret/chlo/ragged_dot.mlir b/stablehl
 +  ]> : tensor<2x11x7xf32>
 +  func.return
 +}
-diff --ruN a/stablehlo/stablehlo/tests/transforms/stablehlo_refine_parameters.mlir b/stablehlo/stablehlo/tests/transforms/stablehlo_refine_parameters.mlir
---- stablehlo/stablehlo/tests/transforms/stablehlo_refine_parameters.mlir
-+++ stablehlo/stablehlo/tests/transforms/stablehlo_refine_parameters.mlir
-@@ -36,7 +36,7 @@
- 
- // -----
- 
--// expected-error @+1 {{number of refinements must match number of function operands 6 vs 1}}
-+// expected-error @+1 {{number of refinements must match number of op operands 6 vs 1}}
- func.func @refine_arguments_invalid_arg_num_mismatch(%arg0: tensor<f32>) {
-   return
- }
 diff --ruN a/stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp b/stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
 --- stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
 +++ stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
@@ -605,221 +593,4 @@ diff --ruN a/stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp b/stable
  }
  }  // namespace
  
-diff --ruN a/stablehlo/stablehlo/transforms/StablehloRefineArguments.cpp b/stablehlo/stablehlo/transforms/StablehloRefineArguments.cpp
---- stablehlo/stablehlo/transforms/StablehloRefineArguments.cpp
-+++ stablehlo/stablehlo/transforms/StablehloRefineArguments.cpp
-@@ -72,78 +72,6 @@
-     Type type = mlir::parseType(shape, context);
-     if (!type) return module->emitOpError("Invalid type string: ") << shape;
-     refinedTypes.push_back(type);
--  }
--  return success();
--}
--
--LogicalResult refinementError(func::FuncOp func, int64_t idx, Type argType,
--                              Type refinedType, StringRef msg) {
--  return func.emitOpError()
--         << "invalid refinement for argument " << idx << ", refinement " << msg
--         << " in " << mlir::debugString(argType) << " -> "
--         << mlir::debugString(refinedType);
--}
--
--// Validates refinement types:
--//   - A type refinement must be specified for each operand
--//   - Refinement types that match operand types are skipped
--//   - Refinement types that do not match operands must be refining tensors
--//   - Refined tensor types must be ranked, operand type can be unranked
--//   - Refined tensor types must match operand type for all static dimensions
--//
--LogicalResult validateRefinedTypes(func::FuncOp func, TypeRange refinedTypes) {
--  // Validate refined shapes
--  if (func.getNumArguments() != refinedTypes.size()) {
--    return func.emitOpError(
--               "number of refinements must match number of function operands ")
--           << refinedTypes.size() << " vs " << func.getNumArguments();
--  }
--
--  // Validate that refinements are valid
--  auto argTypes = func.getArgumentTypes();
--  for (int64_t i = 0; i < func.getNumArguments(); ++i) {
--    Type type = argTypes[i];
--    Type refinedType = refinedTypes[i];
--
--    // Always allow skipping refinement
--    if (type == refinedType) continue;
--
--    // If mismatched, must be tensor types
--    auto tensorType = dyn_cast<TensorType>(type);
--    auto refinedTensorType = dyn_cast<TensorType>(refinedType);
--    if (!tensorType || !refinedTensorType) {
--      return refinementError(func, i, type, refinedType, "must be a tensor");
--    }
--
--    // Check that element types match
--    if (tensorType.getElementType() != refinedTensorType.getElementType()) {
--      return refinementError(func, i, type, refinedType,
--                             "element types must match");
--    }
--
--    // Refined rank cannot be unranked if mismatch
--    if (isa<UnrankedTensorType>(refinedType)) {
--      return refinementError(func, i, type, refinedType, "must be ranked");
--    }
--
--    // Unranked operands can be refined to anything
--    if (!tensorType.hasRank()) continue;
--
--    // Validate ranks match if ranked (must allow unranked tensorType)
--    if (tensorType.getRank() != refinedTensorType.getRank()) {
--      return refinementError(func, i, type, refinedType,
--                             "rank must match operand rank");
--    }
--
--    // Validate static dimension sizes match
--    for (auto [dimSize, refinedDimSize] :
--         llvm::zip(tensorType.getShape(), refinedTensorType.getShape())) {
--      if (!ShapedType::isDynamic(dimSize) && dimSize != refinedDimSize) {
--        return refinementError(
--            func, i, type, refinedType,
--            "dimension sizes must match for static dimensions");
--      }
--    }
-   }
-   return success();
- }
-@@ -219,9 +147,74 @@
- 
- }  // namespace
- 
-+LogicalResult refinementError(Operation* op, int64_t idx, Type argType,
-+                              Type refinedType, StringRef msg) {
-+  return op->emitOpError()
-+         << "invalid refinement for argument " << idx << ", refinement " << msg
-+         << " in " << mlir::debugString(argType) << " -> "
-+         << mlir::debugString(refinedType);
-+}
-+
-+LogicalResult validateRefinedTypes(Operation* op, TypeRange argTypes, TypeRange refinedTypes) {
-+  // Validate refined shapes
-+  if (argTypes.size() != refinedTypes.size()) {
-+    return op->emitOpError(
-+               "number of refinements must match number of op operands ")
-+           << refinedTypes.size() << " vs " << argTypes.size();
-+  }
-+
-+  // Validate that refinements are valid
-+  for (int64_t i = 0; i < argTypes.size(); ++i) {
-+    Type type = argTypes[i];
-+    Type refinedType = refinedTypes[i];
-+
-+    // Always allow skipping refinement
-+    if (type == refinedType) continue;
-+
-+    // If mismatched, must be tensor types
-+    auto tensorType = dyn_cast<TensorType>(type);
-+    auto refinedTensorType = dyn_cast<TensorType>(refinedType);
-+    if (!tensorType || !refinedTensorType) {
-+      return refinementError(op, i, type, refinedType, "must be a tensor");
-+    }
-+
-+    // Check that element types match
-+    if (tensorType.getElementType() != refinedTensorType.getElementType()) {
-+      return refinementError(op, i, type, refinedType,
-+                             "element types must match");
-+    }
-+
-+    // Refined rank cannot be unranked if mismatch
-+    if (isa<UnrankedTensorType>(refinedType)) {
-+      return refinementError(op, i, type, refinedType, "must be ranked");
-+    }
-+
-+    // Unranked operands can be refined to anything
-+    if (!tensorType.hasRank()) continue;
-+
-+    // Validate ranks match if ranked (must allow unranked tensorType)
-+    if (tensorType.getRank() != refinedTensorType.getRank()) {
-+      return refinementError(op, i, type, refinedType,
-+                             "rank must match operand rank");
-+    }
-+
-+    // Validate static dimension sizes match
-+    for (auto [dimSize, refinedDimSize] :
-+         llvm::zip(tensorType.getShape(), refinedTensorType.getShape())) {
-+      if (!ShapedType::isDynamic(dimSize) && dimSize != refinedDimSize) {
-+        return refinementError(
-+            op, i, type, refinedType,
-+            "dimension sizes must match for static dimensions");
-+      }
-+    }
-+  }
-+  return success();
-+}
-+
- LogicalResult refineArguments(func::FuncOp func, TypeRange refinedTypes) {
-   // Verify that refinements are valid
--  if (failed(validateRefinedTypes(func, refinedTypes))) return failure();
-+  if (failed(validateRefinedTypes(func, func.getArgumentTypes(), refinedTypes)))
-+    return failure();
- 
-   // Wrap refined operands in operand wrapper to keep IR valid for refinement
-   wrapRefinedOperands(func, refinedTypes);
-diff --ruN a/stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp b/stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
---- stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
-+++ stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
-@@ -109,7 +109,13 @@
-       // their operands and results. Any operand type in these ops can change
-       // within what's supported by `inferMostSpecificType` without breaking
-       // verification of the op.
--      if (isa<chlo::ChloDialect, StablehloDialect>(user->getDialect()))
-+      if (isa<chlo::ChloDialect, StablehloDialect>(
-+              user->getDialect()))
-+        continue;
-+      // TODO(bartchr): Consider if the dialect allow-listing approach is too
-+      // strict. In the meantime, allow some shape interop with the shardy
-+      // dialect.
-+      if (user->getDialect()->getNamespace() == "sdy")
-         continue;
- 
-       // Simply changing operand type of `func.return` won't work because
-diff --ruN a/stablehlo/stablehlo/transforms/StablehloRefineShapes.h b/stablehlo/stablehlo/transforms/StablehloRefineShapes.h
---- stablehlo/stablehlo/transforms/StablehloRefineShapes.h
-+++ stablehlo/stablehlo/transforms/StablehloRefineShapes.h
-@@ -16,18 +16,37 @@
- #ifndef STABLEHLO_TRANSFORMS_STABLEHLO_REFINE_SHAPES_H
- #define STABLEHLO_TRANSFORMS_STABLEHLO_REFINE_SHAPES_H
- 
-+#include <cstdint>
-+
-+#include "llvm/ADT/SmallVector.h"
- #include "mlir/Dialect/Func/IR/FuncOps.h"
- #include "mlir/IR/BuiltinOps.h"
- #include "mlir/IR/Operation.h"
- #include "mlir/IR/PatternMatch.h"
-+#include "mlir/IR/TypeRange.h"
- #include "mlir/IR/Types.h"
- #include "mlir/IR/Value.h"
-+#include "mlir/IR/ValueRange.h"
- #include "mlir/Interfaces/InferTypeOpInterface.h"
-+#include "mlir/Support/LLVM.h"
- #include "mlir/Support/LogicalResult.h"
- #include "stablehlo/dialect/Base.h"
- 
- namespace mlir {
- namespace stablehlo {
-+
-+// Emits an error message for invalid refinement.
-+LogicalResult refinementError(Operation* op, int64_t idx, Type argType,
-+                              Type refinedType, StringRef msg);
-+
-+// Validates refinement types:
-+//   - A type refinement must be specified for each operand
-+//   - Refinement types that match operand types are skipped
-+//   - Refinement types that do not match operands must be refining tensors
-+//   - Refined tensor types must be ranked, operand type can be unranked
-+//   - Refined tensor types must match operand type for all static dimensions
-+LogicalResult validateRefinedTypes(Operation* op, TypeRange argTypes,
-+                                   TypeRange refinedTypes);
- 
- // Gets a FuncOp that --stablehlo-refine-shapes will run on.
- // Returns a nullptr and emits appropriate errors if such a function cannot
 
