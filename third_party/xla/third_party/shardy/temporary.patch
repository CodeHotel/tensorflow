diff --git a/shardy/dialect/sdy/ir/utils.cc b/shardy/dialect/sdy/ir/utils.cc
index c7ff330..0e7643d 100644
--- a/shardy/dialect/sdy/ir/utils.cc
+++ b/shardy/dialect/sdy/ir/utils.cc
@@ -128,20 +128,6 @@ int64_t isScalar(Value value) {
   return false;
 }
 
-MeshOp getMeshOp(Operation* op, SymbolRefAttr meshSymName) {
-  return SymbolTable::lookupNearestSymbolFrom<sdy::MeshOp>(
-      op, meshSymName);
-}
-
-MeshOp getMeshOp(Operation* op, StringRef meshName) {
-  return getMeshOp(op, SymbolRefAttr::get(op->getContext(), meshName));
-}
-
-MeshOp getMeshOp(const SymbolTable& symbolTable, StringRef meshName) {
-  return symbolTable.lookup<MeshOp>(meshName);
-}
-
-
 MeshAttr getMeshOrLookup(const SymbolTable& symbolTable, Attribute meshOrRef) {
   if (auto mesh = dyn_cast<MeshAttr>(meshOrRef)) {
     return mesh;
@@ -157,7 +143,7 @@ MeshAttr getMeshOrLookup(Operation* op, Attribute meshOrRef) {
 }
 
 MeshAttr getMeshAttr(const SymbolTable& symbolTable, StringRef meshName) {
-  if (MeshOp meshOp = getMeshOp(symbolTable, meshName)) {
+  if (auto meshOp = symbolTable.lookup<MeshOp>(meshName)) {
     return meshOp.getMesh();
   }
 
@@ -174,7 +160,8 @@ MeshAttr getMeshAttr(Operation* op, StringRef meshName) {
 }
 
 MeshAttr getMeshAttr(Operation* op, SymbolRefAttr meshSymName) {
-  if (MeshOp meshOp = getMeshOp(op, meshSymName)) {
+  if (auto meshOp =
+          SymbolTable::lookupNearestSymbolFrom<MeshOp>(op, meshSymName)) {
     return meshOp.getMesh();
   }
 
diff --git a/shardy/dialect/sdy/ir/utils.h b/shardy/dialect/sdy/ir/utils.h
index ef58928..a8b42a6 100644
--- a/shardy/dialect/sdy/ir/utils.h
+++ b/shardy/dialect/sdy/ir/utils.h
@@ -90,20 +90,6 @@ int64_t getTensorRank(Value value);
 // Returns true if the value is a tensor with rank 0.
 int64_t isScalar(Value value);
 
-// Looks up the mesh symbol with the given `meshName` in `symbolTable`, and
-// returns it if it exists in the table, or nullptr otherwise.
-MeshOp getMeshOp(const SymbolTable& symbolTable, StringRef meshName);
-
-// Looks up the mesh symbol with the given `meshSymName` in the symbol table of
-// the enclosing module of `op`, and returns it if it exists in the table, or
-// nullptr otherwise.
-MeshOp getMeshOp(Operation* op, SymbolRefAttr meshSymName);
-
-// Looks up the mesh symbol with the given `meshName` in the symbol table of
-// the enclosing module of `op`, and returns it if it exists in the table, or
-// nullptr otherwise.
-MeshOp getMeshOp(Operation* op, StringRef meshName);
-
 // If `meshOrRef` is a `MeshAttr`, returns it, otherwise, looks up the
 // referenced mesh symbol in `symbolTable`, and returns its `MeshAttr`
 // if it exists in the table, or nullptr otherwise.
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 509398d..8ee25f9 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1 +1,24 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/llvm/test/tools/llc/new-pm/x86_64-regalloc-pipeline.mir b/llvm/test/tools/llc/new-pm/x86_64-regalloc-pipeline.mir
+--- a/llvm/test/tools/llc/new-pm/x86_64-regalloc-pipeline.mir
++++ b/llvm/test/tools/llc/new-pm/x86_64-regalloc-pipeline.mir
+@@ -1,6 +1,6 @@
+ # REQUIRES x86_64-registered-target
+-# RUN: llc -mtriple=x86_64-unknown-linux-gnu -enable-new-pm -O3 -regalloc-npm=fast -print-pipeline-passes %s 2>&1 | FileCheck %s
+-# RUN: llc -mtriple=x86_64-unknown-linux-gnu -enable-new-pm -O3 -regalloc-npm=greedy -print-pipeline-passes %s 2>&1 | FileCheck %s --check-prefix=CHECK-GREEDY
++# RUN: llc -mtriple=x86_64-unknown-linux-gnu -enable-new-pm -O3 -regalloc-npm=fast -print-pipeline-passes %s -o - 2>&1 | FileCheck %s
++# RUN: llc -mtriple=x86_64-unknown-linux-gnu -enable-new-pm -O3 -regalloc-npm=greedy -print-pipeline-passes %s -o - 2>&1 | FileCheck %s --check-prefix=CHECK-GREEDY
+ 
+ # CHECK: regallocfast
+ # CHECK-GREEDY: greedy<all>
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
+@@ -9662,6 +9662,7 @@
+         "lib/Target/LLVMIR/DataLayoutImporter.h",
+         "lib/Target/LLVMIR/DebugImporter.cpp",
+         "lib/Target/LLVMIR/DebugImporter.h",
++        "lib/Target/LLVMIR/LLVMImportInterface.cpp",
+         "lib/Target/LLVMIR/LoopAnnotationImporter.cpp",
+         "lib/Target/LLVMIR/LoopAnnotationImporter.h",
+         "lib/Target/LLVMIR/ModuleImport.cpp",
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index b853f00..667ae4e 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "cb7030dbe7f3f1947c31b3059958ff3968cc22ff"
-    LLVM_SHA256 = "531ad35a4d22db5c944e1495a3bb0bba53f7c535f4ba252063abcf4462e3876f"
+    LLVM_COMMIT = "f6212c1cd3d8b827c7d7e2f6cf54b135c27eacc6"
+    LLVM_SHA256 = "bba6d4c0020622b64202640a94504b957d3597e4f42e9b4f20cbcfa80a8aa41a"
 
     tf_http_archive(
         name = name,
